<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="raisetech.StudentManagement.repository.StudentRepository">

  <select id="searchStudent" resultType="raisetech.StudentManagement.data.Student">
    SELECT * FROM students
  </select>
  <select id="searchStudentsCourse" resultType="raisetech.StudentManagement.data.StudentsCourses">
    SELECT * FROM students_courses
  </select>

  <select id="findById" parameterType="int" resultType="raisetech.StudentManagement.data.Student">
    SELECT * FROM students WHERE student_id = #{id}
  </select>
  <select id="findCoursesById" parameterType="int"
    resultType="raisetech.StudentManagement.data.StudentsCourses">
    SELECT * FROM students_courses WHERE student_id = #{id}
  </select>

  <insert id="registerStudent" parameterType="raisetech.StudentManagement.data.Student"
    useGeneratedKeys="true" keyProperty="studentId">
    INSERT INTO students(name, kana_name, nickname, mail, city, age, gender, remark, is_deleted)
    VALUES(#{name}, #{kanaName}, #{nickname}, #{mail}, #{city}, #{age}, #{gender}, #{remark},
    #{isDeleted})
  </insert>

  <insert id="registerStudentsCourses"
    parameterType="raisetech.StudentManagement.data.StudentsCourses"
    useGeneratedKeys="true" keyProperty="courseId">
    INSERT INTO students_courses(student_id, course, start_course, end_course)
    VALUES(#{studentId}, #{course}, #{startCourse}, #{endCourse})
  </insert>

  <update id="updateStudent" parameterType="raisetech.StudentManagement.data.Student">
    UPDATE students SET
    name = #{name},
    kana_name = #{kanaName},
    nickname = #{nickname},
    mail = #{mail},
    city = #{city},
    age = #{age},
    gender = #{gender},
    remark = #{remark},
    is_deleted = #{isDeleted}
    WHERE student_id = #{studentId}
  </update>
  <update id="updateStudentsCourses"
    parameterType="raisetech.StudentManagement.data.StudentsCourses">
    UPDATE students_courses SET
    course = #{course},
    start_course = #{startCourse},
    end_course = #{endCourse}
    WHERE course_id = #{courseId}
  </update>

  <select id="findStudentDetailsByApplicationStatus" resultMap="studentDetailMap">
    SELECT
    s.student_id,
    s.name,
    sc.course_id,
    sc.course
    FROM
    students s
    JOIN students_courses sc ON s.student_id = sc.student_id
    JOIN students_courses_status scs ON sc.student_id = scs.student_id AND sc.course_id =
    scs.course_id
    WHERE
    scs.application_status = #{applicationStatus}
  </select>

  <resultMap id="courseWithStatusMap"
    type="raisetech.StudentManagement.domain.StudentsDetailStatus">
    <association property="studentsCourses"
      javaType="raisetech.StudentManagement.data.StudentsCourses">
      <id property="courseId" column="course_id"/>
      <result property="studentId" column="student_id"/>
      <result property="course" column="course"/>
      <result property="startCourse" column="start_course"/>
      <result property="endCourse" column="end_course"/>
    </association>
    <association property="studentsCoursesStatus"
      javaType="raisetech.StudentManagement.data.StudentsCoursesStatus">
      <id property="statusId" column="status_id"/>
      <result property="courseId" column="course_id"/>
      <result property="studentId" column="student_id"/>
      <result property="applicationStatus" column="application_status"/>
    </association>
  </resultMap>

  <select id="findCoursesWithStatus" resultMap="courseWithStatusMap">
    SELECT
    sc.course_id,
    sc.student_id,
    sc.course,
    sc.start_course,
    sc.end_course,
    scs.status_id,
    scs.application_status
    FROM
    students_courses sc
    JOIN
    students_courses_status scs ON sc.course_id = scs.course_id
  </select>

  <resultMap id="studentDetailMap" type="raisetech.StudentManagement.domain.StudentDetail">
    <association property="student" javaType="raisetech.StudentManagement.data.Student">
      <id property="studentId" column="student_id"/>
      <result property="name" column="name"/>
    </association>
    <collection property="studentsCourses"
      ofType="raisetech.StudentManagement.data.StudentsCourses">
      <id property="courseId" column="course_id"/>
      <result property="course" column="course"/>
    </collection>
  </resultMap>


</mapper>